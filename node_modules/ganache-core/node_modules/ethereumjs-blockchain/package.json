{
  "_args": [
    [
      "ethereumjs-blockchain@https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
      "/root/trace/node_modules/ganache-core"
    ]
  ],
  "_from": "ethereumjs-blockchain@https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
  "_id": "ethereumjs-blockchain@3.4.0",
  "_inCache": true,
  "_location": "/ganache-core/ethereumjs-blockchain",
  "_phantomChildren": {
    "bn.js": "4.11.8",
    "create-hash": "1.2.0",
    "ethjs-util": "0.1.6",
    "keccak": "1.4.0",
    "rlp": "2.2.3",
    "safe-buffer": "5.2.0",
    "secp256k1": "3.7.1",
    "yallist": "3.0.3"
  },
  "_requested": {
    "name": "ethereumjs-blockchain",
    "raw": "ethereumjs-blockchain@https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
    "rawSpec": "https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/ethereumjs-vm"
  ],
  "_resolved": "https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
  "_shasum": "92240da6ecd86b3d8d324df69510b381f26c966b",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-blockchain@https://registry.npmjs.org/ethereumjs-blockchain/-/ethereumjs-blockchain-3.4.0.tgz",
  "_where": "/root/trace/node_modules/ganache-core",
  "author": {
    "email": "mjbecze@gmail.com",
    "name": "mjbecze"
  },
  "bugs": {
    "url": "https://github.com/ethereumjs/ethereumjs-blockchain/issues"
  },
  "dependencies": {
    "async": "^2.6.1",
    "ethashjs": "~0.0.7",
    "ethereumjs-block": "~2.2.0",
    "ethereumjs-common": "^1.1.0",
    "ethereumjs-util": "~6.0.0",
    "flow-stoplight": "^1.0.0",
    "level-mem": "^3.0.1",
    "lru-cache": "^5.1.1",
    "safe-buffer": "^5.1.2",
    "semaphore": "^1.1.0"
  },
  "description": "A module to store and interact with blocks",
  "devDependencies": {
    "coveralls": "^3.0.2",
    "nyc": "^13.0.1",
    "standard": "^11.0.1",
    "tape": "^4.9.1"
  },
  "files": [
    "*.js"
  ],
  "homepage": "https://github.com/ethereumjs/ethereumjs-blockchain#readme",
  "keywords": [
    "blockchain",
    "ethereum"
  ],
  "license": "MPL-2.0",
  "main": "index.js",
  "name": "ethereumjs-blockchain",
  "optionalDependencies": {},
  "readme": "# SYNOPSIS\n[![NPM Package](https://img.shields.io/npm/v/ethereumjs-blockchain.svg?style=flat-square)](https://www.npmjs.org/package/ethereumjs-blockchain)\n[![Build Status](https://travis-ci.org/ethereumjs/ethereumjs-blockchain.svg?branch=master)](https://travis-ci.org/ethereumjs/ethereumjs-blockchain)\n[![Coverage Status](https://img.shields.io/coveralls/ethereumjs/ethereumjs-blockchain.svg?style=flat-square)](https://coveralls.io/r/ethereumjs/ethereumjs-blockchain)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/ethereumjs-lib?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) or #ethereumjs on freenode\n\nA module to store and interact with blocks.\n\n# INSTALL\n`npm install ethereumjs-blockchain`\n\n# EXAMPLE\n\nThe following is an example to iterate through an existing Geth DB (needs ``level`` to be\ninstalled separately):\n\n```javascript\nconst level = require('level')\nconst Blockchain = require('ethereumjs-blockchain')\nconst utils = require('ethereumjs-util')\n\nconst gethDbPath = './chaindata' // Add your own path here\nconst db = level(gethDbPath)\n\nnew Blockchain({db: db}).iterator('i', (block, reorg, cb) => {\n  const blockNumber = utils.bufferToInt(block.header.number)\n  const blockHash = block.hash().toString('hex')\n  console.log(`BLOCK ${blockNumber}: ${blockHash}`)\n  cb()\n}, (err) => console.log(err || 'Done.'))\n```\n\n**WARNING**: Since ``ethereumjs-blockchain`` is also doing write operations\non the DB for safety reasons only run this on a copy of your database, otherwise this might lead\nto a compromised DB state.\n\n# API\n\n- [`Blockchain`](#blockchain)\n    - [`new Blockchain(opts)`](#new-blockchainblockdb-detailsdb)\n    - [`BlockChain` methods](#blockchain-methods)\n        - [`blockchain.putGenesis(genesis, [cb])`](#blockchainputgenesisgenesis-cb)\n        - [`blockchain.getHead(name, [cb])`](#blockchaingetheadname-cb)\n        - [`blockchain.getLatestHeader([cb])`](#blockchaingetlatestheadercb)\n        - [`blockchain.getLatestBlock([cb])`](#blockchaingetlatestblockcb)\n        - [`blockchain.putBlocks(blocks, [cb])`](#blockchainputblocksblocks-cb)\n        - [`blockchain.putBlock(block, [cb])`](#blockchainputblockblock-cb)\n        - [`blockchain.getBlock(hash, [cb])`](#blockchaingetblockhash-cb)\n        - [`blockchain.getBlocks(blockId, maxBlocks, skip, reverse, [cb])`](#blockchaingetblocksblockid-maxblocks-skip-reverse-cb)\n        - [`blockchain.putHeaders(headers, [cb])`](#blockchainputheadersheaders-cb)\n        - [`blockchain.putHeader(header, [cb])`](#blockchainputheaderheader-cb)\n        - [`blockchain.selectNeededHashes(hashes, [cb])`](#blockchainselectneededhasheshashes-cb)\n        - [`blockchain.delBlock(blockHash, [cb])`](#blockchaindelblockblockhash-cb)\n        - [`blockchain.iterator(name, onBlock, [cb])`](#blockchainiteratorname-onblock-cb)        \n\n## `Blockchain`\nImplements functions for retrieving, manipulating and storing Ethereum's blockchain\n\n### `new Blockchain(opts)`\nCreates new Blockchain object\n-   `opts.chain` **([String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number))** The chain for the block [default: 'mainnet']\n-   `opts.hardfork` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** Hardfork for the block [default: null, block number-based behavior]\n-   `opts.common` **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** Alternatively pass a Common instance (ethereumjs-common) instead of setting chain/hardfork directly\n- `opts.db` - Database to store blocks and metadata. Should be a [levelup](https://github.com/rvagg/node-levelup) instance.\n- `opts.validate` - this the flag to validate blocks (e.g. Proof-of-Work), latest HF rules supported: ``Constantinople``.\n\n[DEPRECATION NOTE]\nThe old separated DB constructor parameters `opts.blockDB` and `opts.detailsDB` from before the Geth DB-compatible ``v3.0.0`` release are deprecated and continued usage is discouraged. When provided `opts.blockDB` will be used\nas `opts.db` and `opts.detailsDB` is ignored. On the storage level the DB formats are not compatible and it is not\npossible to load an old-format DB state into a post-``v3.0.0`` ``Blockchain`` object.\n\n### `BlockChain` methods\n\n#### `blockchain.putGenesis(genesis, cb)`\nPuts the genesis block in the database.\n- `genesis` - the genesis block to be added\n- `cb` - the callback. It is given two parameters `err` and the saved `block`\n\n--------------------------------------------------------\n\n#### `blockchain.getHead(name, cb)`\nReturns the specified iterator head.\n- `name` - Optional name of the state root head (default: 'vm')\n- `cb` - the callback. It is given two parameters `err` and the returned `block`\n\n--------------------------------------------------------\n\n#### `blockchain.getLatestHeader(cb)`\nReturns the latest header in the canonical chain.\n- `cb` - the callback. It is given two parameters `err` and the returned `header`\n\n--------------------------------------------------------\n\n#### `blockchain.getLatestBlock(cb)`\nReturns the latest full block in the canonical chain.\n- `cb` - the callback. It is given two parameters `err` and the returned `block`\n\n--------------------------------------------------------\n\n#### `blockchain.putBlocks(blocks, cb)`\nAdds many blocks to the blockchain.\n- `blocks` - the blocks to be added to the blockchain\n- `cb` - the callback. It is given two parameters `err` and the last of the saved `blocks`\n--------------------------------------------------------\n\n#### `blockchain.putBlock(block, cb)`\nAdds a block to the blockchain.\n- `block` - the block to be added to the blockchain\n- `cb` - the callback. It is given two parameters `err` and the saved `block`\n\n--------------------------------------------------------\n\n#### `blockchain.getBlock(blockTag, cb)`\nGets a block by its blockTag.\n- `blockTag`  - the block's hash or number\n- `cb` - the callback. It is given two parameters `err` and the found `block` (an instance of https://github.com/ethereumjs/ethereumjs-block) if any.\n\n--------------------------------------------------------\n\n#### `blockchain.getBlocks(blockId, maxBlocks, skip, reverse, cb)`\nLooks up many blocks relative to blockId.\n- `blockId` - the block's hash or number\n- `maxBlocks` - max number of blocks to return\n- `skip` - number of blocks to skip\n- `reverse` - fetch blocks in reverse\n- `cb` - the callback. It is given two parameters `err` and the found `blocks` if any.\n\n--------------------------------------------------------\n\n#### `blockchain.putHeaders(headers, cb)`\nAdds many headers to the blockchain.\n- `headers` - the headers to be added to the blockchain\n- `cb` - the callback. It is given two parameters `err` and the last of the saved `headers`\n--------------------------------------------------------\n\n#### `blockchain.putHeader(header, cb)`\nAdds a header to the blockchain.\n- `header` - the header to be added to the blockchain\n- `cb` - the callback. It is given two parameters `err` and the saved `header`\n\n--------------------------------------------------------\n\n#### `blockchain.getDetails(hash, cb)`\n[DEPRECATED] Returns an empty object\n\n--------------------------------------------------------\n\n#### `blockchain.selectNeededHashes(hashes, cb)`\nGiven an ordered array, returns to the callback an array of hashes that are not in the blockchain yet.\n- `hashes`  - Ordered array of hashes\n- `cb` - the callback. It is given two parameters `err` and hashes found.\n\n--------------------------------------------------------\n\n#### `blockchain.delBlock(blockHash, cb)`\nDeletes a block from the blockchain. All child blocks in the chain are deleted and any encountered heads are set to the parent block\n- `blockHash`  - the hash of the block to be deleted\n- `cb` - A callback.\n\n--------------------------------------------------------\n\n#### `blockchain.iterator(name, onBlock, cb)`\nIterates through blocks starting at the specified verified state root head and calls the onBlock function on each block\n- `name` - name of the state root head\n- `onBlock` - function called on each block with params (block, reorg, cb)\n- `cb` - A callback function\n\n# TESTS\n\nTests can be found in the ``test`` directory and run with ``npm run test``.\n\nThese can also be valuable as examples/inspiration on how to run the library and invoke different parts of the API.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/ethereumjs-blockchain.git"
  },
  "scripts": {
    "coverage": "nyc npm run test && nyc report --reporter=text-lcov > .nyc_output/lcov.info",
    "coveralls": "npm run coverage && coveralls <.nyc_output/lcov.info",
    "lint": "standard",
    "test": "tape ./test/index.js"
  },
  "version": "3.4.0"
}
